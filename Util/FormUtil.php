<?php
/**
 * Clip
 *
 * @copyright  (c) Clip Team
 * @link       http://github.com/zikula-modules/clip/
 * @license    GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package    Clip
 * @subpackage Util
 */

namespace Matheo\Clip\Util;

use Matheo\Clip\Util;
use ModUtil;
use Zikula_Form_AbstractHandler;
use Zikula_Form_View;
use Zikula_View;
use ZLanguage;
use DataUtil;

/**
 * Utility class used in publication edit forms.
 *
 * The methods of this class behaves as Smarty plugins.
 */
class FormUtil
{
    // state vars
    protected $alias;
    protected $tid;
    protected $id;
    protected $pid;
    protected $oldid;
    /**
     * Constructor.
     *
     * @param Zikula_Form_AbstractHandler $handler Reference to the form handler.
     */
    public function __construct(Zikula_Form_View &$view)
    {
        $this->reset(array(), $view);
        // non numeric autogenerated id
        $this->oldid = 'a';
    }
    
    /**
     * Getters.
     */
    public function getAlias()
    {
        return $this->alias;
    }
    
    public function getTid()
    {
        return $this->tid;
    }
    
    public function getId()
    {
        return $this->id;
    }
    
    public function getPid(Zikula_View $view)
    {
        $data = $view->getTplVar('clipdata');
        return isset($data[$this->alias][$this->tid][$this->id]) ? key($data[$this->alias][$this->tid][$this->id]) : 'a';
    }
    
    /**
     * Form utilities.
     */
    public function get($params, Zikula_Form_View &$view)
    {
        $var = isset($params['var']) ? $params['var'] : 'id';
        return isset($this->{$var}) ? $this->{$var} : null;
    }
    
    public function set($params, Zikula_Form_View &$view)
    {
        if (!isset($params['value'])) {
            return;
        }
        $var = isset($params['var']) ? $params['var'] : 'id';
        if (!isset($this->{$var})) {
            return;
        }
        $this->{$var} = $params['value'];
    }
    
    public function reset($params, Zikula_Form_View &$view)
    {
        $this->alias = $view->eventHandler->getAlias();
        $this->tid = $view->eventHandler->getTid();
        $this->id = $view->eventHandler->getId();
        $this->pid = $this->resolvePid(array(), $view);
    }
    
    public function newId($params, Zikula_Form_View &$view)
    {
        if (is_numeric($this->id)) {
            $this->id = $this->oldid;
        }
        $this->oldid = ++$this->id;
    }
    
    /**
     * Get the current pub id prefix.
     *
     * Available attributes:
     *  - assign (string)  The name of a template variable to assign the output to.
     *  - alias  (string)  Context of the value to set.
     *  - tid    (integer) ID of the publication type.
     *  - rid    (integer) ID of the publication record.
     *
     * Example:
     *
     *  Get the current publication prefix and assign it to $pre:
     *
     *  <samp>{clip_form->getprefix assign='pre'}</samp>
     *
     * @param array       $args All parameters passed to this plugin from the template.
     * @param Zikula_View $view Reference to the {@link Zikula_View} object.
     *
     * @return string Prefix of the field id
     */
    public function getprefix($args, Zikula_View $view)
    {
        $pre = isset($args['rel']) && $args['rel'] ? 'cliprel' : 'clip';
        $alias = isset($args['alias']) ? $args['alias'] : $this->alias;
        $tid = isset($args['tid']) ? $args['tid'] : $this->tid;
        $rid = isset($args['rid']) ? $args['rid'] : $this->id;
        $pid = isset($args['pid']) ? $args['pid'] : $this->getPid($view);
        return "{$pre}_{$alias}_{$tid}_{$rid}_{$pid}_";
    }
    
    /**
     * Get a common field of a data set.
     *
     * Available attributes:
     *  - assign (string)  The name of a template variable to assign the output to.
     *  - alias  (string)  Context of the value to set.
     *  - tid    (integer) ID of the publication type.
     *  - field  (string)  The field to retrieve.
     *
     * Example:
     *
     *  Get the category of a filtered loaded collection and assign it to the template variable $cid:
     *
     *  <samp>{clip_form->getfield field='category' assign='cid'}</samp>
     *
     * @param array       $args All parameters passed to this plugin from the template.
     * @param Zikula_View $view Reference to the {@link Zikula_View} object.
     *
     * @return mixed Value of the field
     */
    public function getvalue($args, Zikula_View $view)
    {
        $field = isset($args['field']) ? (string) $args['field'] : null;
        if (!$field) {
            $view->trigger_error(__f('Error! in %1$s: the %2$s parameter must be specified.', array('clip_form->getvalue', 'field')));
        }
        $data = $view->getTplVar('clipdata');
        $alias = isset($args['alias']) ? $args['alias'] : $this->alias;
        $tid = isset($args['tid']) ? $args['tid'] : $this->tid;
        $record = isset($data[$alias][$tid]) ? reset($data[$alias][$tid]) : array();
        $record = !empty($record) ? reset($record) : array();
        return isset($record[$field]) ? $record[$field] : null;
    }
    
    /**
     * Load one publication.
     *
     * Available attributes:
     *  - tid       (integer) ID of the publication type.
     *  - pid       (integer) ID of the publication.
     *  - id        (integer) ID of the publication revision (optional if pid is used).
     *  - checkperm (boolean) Whether to check the permissions.
     *  - loadrels  (boolean) Direct parameter to load the publication relations.
     *  - onlyown   (boolean) Direct parameter to specify whether to load only own relations or not.
     *
     * Example:
     *
     *  Load a specific publication of the pubtype #1:
     *
     *  <samp>{clip_form->loadone tid=1 id=26}</samp>
     *
     * @param array       $params All parameters passed to this plugin from the template.
     * @param Zikula_View $view   Reference to the {@link Zikula_View} object.
     *
     * @return void
     */
    public function loadone($args, Zikula_View &$view)
    {
        $args['tid'] = isset($args['tid']) ? $args['tid'] : $this->tid;
        $args['handleplugins'] = false;
        $args['loadworkflow'] = false;
        $args['rel'] = array('load' => isset($args['loadrels']) ? (bool) $args['loadrels'] : false, 'onlyown' => isset($args['onlyown']) ? (bool) $args['onlyown'] : true);
        $args['rel'] = Util::getPubtypeConfig('edit', $args['rel']);
        if (!isset($args['pid']) || empty($args['pid'])) {
            $args['pid'] = ModUtil::apiFunc('Clip', 'user', 'getPid', $args);
        }
        // API call
        $pub = ModUtil::apiFunc('Clip', 'user', 'get', $args);
        if (!$pub) {
            return;
        }
        // processing
        $data = $view->getTplVar('clipdata');
        $data[$this->alias][$args['tid']][$pub->id][$pub->core_pid] = $pub->clipFormGet($args['rel']['load'], $args['rel']['onlyown']);
        $view->assign('clipdata', $data);
    }
    
    /**
     * Load many publications.
     *
     * Available attributes:
     *  - tid          (integer) ID of the publication type.
     *  - filter       (string)  Filter string.
     *  - orderby      (string)  OrderBy string.
     *  - startnum     (integer) Offset to start from.
     *  - itemsperpage (integer) Number of items to retrieve.
     *  - checkperm    (boolean) Whether to check the permissions.
     *  - loadrels     (boolean) Direct parameter to load the publication relations.
     *  - onlyown      (boolean) Direct parameter to specify whether to load only own relations or not.
     *
     * Example:
     *
     *  Load a filtered list of publications of the pubtype #2:
     *
     *  <samp>{clip_form->loadmany tid=2 filter="relation:eq:`$pubdata.id`"}</samp>
     *
     * @param array       $params All parameters passed to this plugin from the template.
     * @param Zikula_View $view   Reference to the {@link Zikula_View} object.
     *
     * @return void
     */
    public function loadmany($args, Zikula_View &$view)
    {
        $args['tid'] = isset($args['tid']) ? $args['tid'] : $this->tid;
        $args['countmode'] = 'no';
        $args['itemsperpage'] = isset($args['itemsperpage']) ? $args['itemsperpage'] : ModUtil::getVar('Clip', 'maxperpage', 100);
        $args['orderby'] = isset($args['orderby']) ? $args['orderby'] : '';
        $args['handleplugins'] = false;
        $args['loadworkflow'] = false;
        $args['rel'] = array('load' => isset($args['loadrels']) ? (bool) $args['loadrels'] : false, 'onlyown' => isset($args['onlyown']) ? (bool) $args['onlyown'] : true);
        $args['rel'] = Util::getPubtypeConfig('edit', $args['rel']);
        $args['where'] = array();
        $args['where'][] = array('core_online = ?', 1);
        $args['where'][] = array('core_visible = ?', 1);
        $args['where'][] = array('core_intrash = ?', 0);
        $args['filter'] = isset($args['filter']) ? $args['filter'] : '()';
        // search for additional filters like FilterUtil
        $i = 1;
        while (isset($args["filter{$i}"])) {
            $args['filter'] .= !empty($args["filter{$i}"]) ? '*' . $args["filter{$i}"] : '';
            $i++;
        }
        // API call
        $pubs = ModUtil::apiFunc('Clip', 'user', 'getall', $args);
        if (!$pubs['publist']) {
            return;
        }
        // processing
        $data = $view->getTplVar('clipdata');
        foreach ($pubs['publist'] as $pub) {
            $data[$this->alias][$args['tid']][$pub->id][$pub->core_pid] = $pub->clipFormGet($args['rel']['load'], $args['rel']['onlyown']);
        }
        $view->assign('clipdata', $data);
    }
    
    /**
     * Load a value in the form data.
     *
     * Available attributes:
     *  - alias (string)  Context of the value to set.
     *  - tid   (integer) ID of the publication type.
     *  - rid   (integer) ID of the publication (optional).
     *  - field (string) The field to retrieve.
     *  - value (mixed)   Value to set.
     *
     * Example:
     *
     *  Load a single value on the form data:
     *
     *  <samp>{clip_form->loadvalue field='dummy' value=$pubdata.id}</samp>
     *
     * @param array       $params All parameters passed to this plugin from the template.
     * @param Zikula_View $view   Reference to the {@link Zikula_View} object.
     *
     * @return void
     */
    public function loadvalue($args, Zikula_View &$view)
    {
        $field = isset($args['field']) ? (string) $args['field'] : null;
        $value = isset($args['value']) ? $args['value'] : null;
        if (!$field) {
            $view->trigger_error(__f('Error! in %1$s: the %2$s parameter must be specified.', array('Util->loadvalue', 'field')));
        }
        if (!$value) {
            $view->trigger_error(__f('Error! in %1$s: the %2$s parameter must be specified.', array('Util->loadvalue', 'value')));
        }
        $alias = isset($args['alias']) ? $args['alias'] : $this->alias;
        $tid = isset($args['tid']) ? $args['tid'] : $this->tid;
        $rid = isset($args['rid']) ? $args['rid'] : $this->id;
        $pid = isset($args['pid']) ? $args['pid'] : $this->resolvePid($args, $view);
        // processing
        $data = $view->getTplVar('clipdata');
        $data[$alias][$tid][$rid][$pid][$field] = $value;
        $view->assign('clipdata', $data);
    }
    
    /**
     * Set the ID of a loaded publication.
     *
     * Passed attributes will be considered as conditions to search a match.
     *
     * Example:
     *
     *  Search the loaded publication for the current alias/tid with relation equal to the current publication:
     *
     *  <samp>{clip_form->resolveId relation=$pubdata.id}</samp>
     *
     * @param array       $params All parameters passed to this plugin from the template.
     * @param Zikula_View $view   Reference to the {@link Zikula_View} object.
     *
     * @return void
     */
    public function resolveId($params, Zikula_Form_View &$view)
    {
        if (!$params) {
            return $view->trigger_error(__('Condition parameters must be passed to clip_form->resolveId.', ZLanguage::getModuleDomain('Clip')));
        }
        // check the cached ids
        static $cache = array();
        $cacheid = ":{$this->alias}:{$this->tid}:~";
        foreach ($params as $field => $value) {
            $cacheid .= "{$field}~{$value}~";
        }
        $cacheid = base64_encode($cacheid);
        if (isset($cache[$cacheid])) {
            $this->id = $cache[$cacheid];
            $this->resolvePid($params, $view);
            return;
        }
        // check if the data is set
        $data = $view->getTplVar('clipdata');
        if (!isset($data[$this->alias][$this->tid])) {
            $this->newId($params, $view);
            $cache[$cacheid] = $this->id;
            $this->resolvePid($params, $view);
            return;
        }
        $data = $data[$this->alias][$this->tid];
        // validate the parameters
        $pub = reset(reset($data));
        foreach (array_keys($params) as $field) {
            if (!array_key_exists($field, $pub)) {
                return $view->trigger_error(__f('The passed parameter [%s] does not match with the publications to search.', DataUtil::formatForDisplay($field), ZLanguage::getModuleDomain('Clip')));
            }
        }
        foreach ($data as $id => $pub) {
            $pub = reset($pub);
            $found = true;
            // test the different parameters
            foreach ($params as $field => $value) {
                // handle equal null values
                if (is_null($value) && is_null($pub[$field])) {
                    continue;
                }
                // test a loaded relation or the field value
                if (is_array($pub[$field]) && $pub[$field]['id'] != $value || $pub[$field] != $value) {
                    $found = false;
                    break;
                }
            }
            if ($found) {
                $this->id = $cache[$cacheid] = $id;
                $this->resolvePid($params, $view);
                break;
            }
        }
        if (!$found) {
            $this->newId($params, $view);
            $cache[$cacheid] = $this->id;
            $this->resolvePid($params, $view);
            return;
        }
    }
    
    /**
     * Resolve the pid of the current publication.
     *
     * Available attributes:
     *  - assign (string)  The name of a template variable to assign the output to.
     *  - alias  (string)  Context of the value to set.
     *  - tid    (integer) ID of the publication type.
     *  - rid    (integer) ID of the publication.
     *
     * Example:
     *
     *  Set the current pid:
     *
     *  <samp>{clip_form->resolvePid}</samp>
     *
     *  Get another pid into $pid:
     *
     *  <samp>{clip_form->resolvePid alias='someone' tid=X id=Y assign='pid'}</samp>
     *
     * @param array       $args All parameters passed to this plugin from the template.
     * @param Zikula_View $view Reference to the {@link Zikula_View} object.
     *
     * @return mixed Value of the field
     */
    public function resolvePid($args, Zikula_View $view)
    {
        $alias = isset($args['alias']) ? $args['alias'] : $this->alias;
        $tid = isset($args['tid']) ? $args['tid'] : $this->tid;
        $rid = isset($args['rid']) ? $args['rid'] : $this->id;
        $data = $view->getTplVar('clipdata');
        $this->pid = isset($data[$alias][$tid][$rid]) ? key($data[$alias][$tid][$rid]) : 'a';
    }

}
